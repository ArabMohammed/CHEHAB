#include <cstddef>
#include <cstdint>
#include <utility>
#include "_gen_he_matrix_mul.hpp"

using namespace std;
using namespace seal;

void matrix_mul(const unordered_map<string, Ciphertext> &encrypted_inputs,
const unordered_map<string, Plaintext> &encoded_inputs,
unordered_map<string, Ciphertext> &encrypted_outputs,
unordered_map<string, Plaintext> &encoded_outputs,
const BatchEncoder &encoder,
const Encryptor &encryptor,
const Evaluator &evaluator,
const RelinKeys &relin_keys,
const GaloisKeys &galois_keys)
{
Ciphertext c64 = encrypted_inputs.at("tensor[7][7]");
Ciphertext c63 = encrypted_inputs.at("tensor[7][6]");
Ciphertext c62 = encrypted_inputs.at("tensor[7][5]");
Ciphertext c61 = encrypted_inputs.at("tensor[7][4]");
Ciphertext c60 = encrypted_inputs.at("tensor[7][3]");
Ciphertext c29 = encrypted_inputs.at("tensor[3][4]");
Ciphertext c28 = encrypted_inputs.at("tensor[3][3]");
Ciphertext c27 = encrypted_inputs.at("tensor[3][2]");
Ciphertext c26 = encrypted_inputs.at("tensor[3][1]");
Ciphertext c25 = encrypted_inputs.at("tensor[3][0]");
Ciphertext c24 = encrypted_inputs.at("tensor[2][7]");
Ciphertext c23 = encrypted_inputs.at("tensor[2][6]");
Ciphertext c22 = encrypted_inputs.at("tensor[2][5]");
Ciphertext c21 = encrypted_inputs.at("tensor[2][4]");
Ciphertext c20 = encrypted_inputs.at("tensor[2][3]");
Ciphertext c19 = encrypted_inputs.at("tensor[2][2]");
Ciphertext c18 = encrypted_inputs.at("tensor[2][1]");
Ciphertext c17 = encrypted_inputs.at("tensor[2][0]");
Ciphertext c16 = encrypted_inputs.at("tensor[1][7]");
Ciphertext c15 = encrypted_inputs.at("tensor[1][6]");
Ciphertext c14 = encrypted_inputs.at("tensor[1][5]");
Ciphertext c1 = encrypted_inputs.at("tensor[0][0]");
Ciphertext c2 = encrypted_inputs.at("tensor[0][1]");
Ciphertext c3 = encrypted_inputs.at("tensor[0][2]");
Ciphertext c4 = encrypted_inputs.at("tensor[0][3]");
Ciphertext c5 = encrypted_inputs.at("tensor[0][4]");
Ciphertext c6 = encrypted_inputs.at("tensor[0][5]");
Ciphertext c7 = encrypted_inputs.at("tensor[0][6]");
Ciphertext c8 = encrypted_inputs.at("tensor[0][7]");
Ciphertext c9 = encrypted_inputs.at("tensor[1][0]");
Ciphertext c10 = encrypted_inputs.at("tensor[1][1]");
Ciphertext c11 = encrypted_inputs.at("tensor[1][2]");
Ciphertext c12 = encrypted_inputs.at("tensor[1][3]");
Ciphertext c13 = encrypted_inputs.at("tensor[1][4]");
Ciphertext c30 = encrypted_inputs.at("tensor[3][5]");
Ciphertext c31 = encrypted_inputs.at("tensor[3][6]");
Ciphertext c32 = encrypted_inputs.at("tensor[3][7]");
Ciphertext c33 = encrypted_inputs.at("tensor[4][0]");
Ciphertext c34 = encrypted_inputs.at("tensor[4][1]");
Ciphertext c35 = encrypted_inputs.at("tensor[4][2]");
Ciphertext c36 = encrypted_inputs.at("tensor[4][3]");
Ciphertext c37 = encrypted_inputs.at("tensor[4][4]");
Ciphertext c38 = encrypted_inputs.at("tensor[4][5]");
Ciphertext c39 = encrypted_inputs.at("tensor[4][6]");
Ciphertext c40 = encrypted_inputs.at("tensor[4][7]");
Ciphertext c41 = encrypted_inputs.at("tensor[5][0]");
Ciphertext c42 = encrypted_inputs.at("tensor[5][1]");
Ciphertext c43 = encrypted_inputs.at("tensor[5][2]");
Ciphertext c44 = encrypted_inputs.at("tensor[5][3]");
Ciphertext c45 = encrypted_inputs.at("tensor[5][4]");
Ciphertext c46 = encrypted_inputs.at("tensor[5][5]");
Ciphertext c47 = encrypted_inputs.at("tensor[5][6]");
Ciphertext c48 = encrypted_inputs.at("tensor[5][7]");
Ciphertext c49 = encrypted_inputs.at("tensor[6][0]");
Ciphertext c50 = encrypted_inputs.at("tensor[6][1]");
Ciphertext c51 = encrypted_inputs.at("tensor[6][2]");
Ciphertext c52 = encrypted_inputs.at("tensor[6][3]");
Ciphertext c53 = encrypted_inputs.at("tensor[6][4]");
Ciphertext c54 = encrypted_inputs.at("tensor[6][5]");
Ciphertext c55 = encrypted_inputs.at("tensor[6][6]");
Ciphertext c56 = encrypted_inputs.at("tensor[6][7]");
Ciphertext c57 = encrypted_inputs.at("tensor[7][0]");
Ciphertext c58 = encrypted_inputs.at("tensor[7][1]");
Ciphertext c59 = encrypted_inputs.at("tensor[7][2]");
size_t slot_count = encoder.slot_count();
Plaintext p1488;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p1488);
Plaintext p1469;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1469);
Plaintext p1466;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p1466);
Plaintext p1447;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1447);
Plaintext p1444;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p1444);
Plaintext p1425;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1425);
Plaintext p1422;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p1422);
Plaintext p1403;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1403);
Plaintext p1400;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p1400);
Plaintext p1381;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1381);
Plaintext p1378;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p1378);
Plaintext p1359;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1359);
Plaintext p1356;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p1356);
Plaintext p1337;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1337);
Plaintext p1334;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p1334);
Plaintext p1315;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1315);
Plaintext p1313;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1313);
Plaintext p1310;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p1310);
Plaintext p1291;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1291);
Plaintext p1288;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p1288);
Plaintext p1269;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1269);
Plaintext p1266;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p1266);
Plaintext p1247;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1247);
Plaintext p1244;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p1244);
Plaintext p1225;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1225);
Plaintext p1222;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p1222);
Plaintext p1203;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1203);
Plaintext p1200;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p1200);
Plaintext p1181;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1181);
Plaintext p1178;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p1178);
Plaintext p1159;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1159);
Plaintext p1156;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p1156);
Plaintext p1137;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1137);
Plaintext p1135;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1135);
Plaintext p1132;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p1132);
Plaintext p1113;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1113);
Plaintext p1110;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p1110);
Plaintext p1091;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1091);
Plaintext p1088;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p1088);
Plaintext p1069;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1069);
Plaintext p1066;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p1066);
Plaintext p1047;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1047);
Plaintext p1044;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p1044);
Plaintext p1025;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1025);
Plaintext p1022;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p1022);
Plaintext p1003;
encoder.encode(vector<std::int64_t>(slot_count, 0), p1003);
Plaintext p1000;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p1000);
Plaintext p981;
encoder.encode(vector<std::int64_t>(slot_count, 0), p981);
Plaintext p978;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p978);
Plaintext p959;
encoder.encode(vector<std::int64_t>(slot_count, 0), p959);
Plaintext p957;
encoder.encode(vector<std::int64_t>(slot_count, 0), p957);
Plaintext p954;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p954);
Plaintext p935;
encoder.encode(vector<std::int64_t>(slot_count, 0), p935);
Plaintext p932;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p932);
Plaintext p444;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p444);
Plaintext p825;
encoder.encode(vector<std::int64_t>(slot_count, 0), p825);
Plaintext p910;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p910);
Plaintext p398;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p398);
Plaintext p779;
encoder.encode(vector<std::int64_t>(slot_count, 0), p779);
Plaintext p888;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p888);
Plaintext p376;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p376);
Plaintext p757;
encoder.encode(vector<std::int64_t>(slot_count, 0), p757);
Plaintext p866;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p866);
Plaintext p354;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p354);
Plaintext p735;
encoder.encode(vector<std::int64_t>(slot_count, 0), p735);
Plaintext p844;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p844);
Plaintext p332;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p332);
Plaintext p713;
encoder.encode(vector<std::int64_t>(slot_count, 0), p713);
Plaintext p822;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p822);
Plaintext p310;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p310);
Plaintext p691;
encoder.encode(vector<std::int64_t>(slot_count, 0), p691);
Plaintext p800;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p800);
Plaintext p288;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p288);
Plaintext p669;
encoder.encode(vector<std::int64_t>(slot_count, 0), p669);
Plaintext p647;
encoder.encode(vector<std::int64_t>(slot_count, 0), p647);
Plaintext p425;
encoder.encode(vector<std::int64_t>(slot_count, 0), p425);
Plaintext p113;
encoder.encode(vector<std::int64_t>(slot_count, 0), p113);
Plaintext p110;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p110);
Plaintext p491;
encoder.encode(vector<std::int64_t>(slot_count, 0), p491);
Plaintext p291;
encoder.encode(vector<std::int64_t>(slot_count, 0), p291);
Plaintext p622;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p622);
Plaintext p201;
encoder.encode(vector<std::int64_t>(slot_count, 0), p201);
Plaintext p469;
encoder.encode(vector<std::int64_t>(slot_count, 0), p469);
Plaintext p247;
encoder.encode(vector<std::int64_t>(slot_count, 0), p247);
Plaintext p157;
encoder.encode(vector<std::int64_t>(slot_count, 0), p157);
Plaintext p423;
encoder.encode(vector<std::int64_t>(slot_count, 0), p423);
Plaintext p754;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p754);
Plaintext p69;
encoder.encode(vector<std::int64_t>(slot_count, 0), p69);
Plaintext p132;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p132);
Plaintext p513;
encoder.encode(vector<std::int64_t>(slot_count, 0), p513);
Plaintext p67;
encoder.encode(vector<std::int64_t>(slot_count, 0), p67);
Plaintext p154;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p154);
Plaintext p535;
encoder.encode(vector<std::int64_t>(slot_count, 0), p535);
Plaintext p269;
encoder.encode(vector<std::int64_t>(slot_count, 0), p269);
Plaintext p179;
encoder.encode(vector<std::int64_t>(slot_count, 0), p179);
Plaintext p420;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p420);
Plaintext p447;
encoder.encode(vector<std::int64_t>(slot_count, 0), p447);
Plaintext p91;
encoder.encode(vector<std::int64_t>(slot_count, 0), p91);
Plaintext p242;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p242);
Plaintext p135;
encoder.encode(vector<std::int64_t>(slot_count, 0), p135);
Plaintext p313;
encoder.encode(vector<std::int64_t>(slot_count, 0), p313);
Plaintext p644;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p644);
Plaintext p223;
encoder.encode(vector<std::int64_t>(slot_count, 0), p223);
Plaintext p335;
encoder.encode(vector<std::int64_t>(slot_count, 0), p335);
Plaintext p666;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p666);
Plaintext p68;
encoder.encode(vector<std::int64_t>(slot_count, 0), p68);
Plaintext p576;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p576);
Plaintext p245;
encoder.encode(vector<std::int64_t>(slot_count, 0), p245);
Plaintext p176;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p176);
Plaintext p557;
encoder.encode(vector<std::int64_t>(slot_count, 0), p557);
Plaintext p357;
encoder.encode(vector<std::int64_t>(slot_count, 0), p357);
Plaintext p688;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p688);
Plaintext p198;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p198);
Plaintext p65;
encoder.encode(vector<std::int64_t>(slot_count, 0), p65);
Plaintext p579;
encoder.encode(vector<std::int64_t>(slot_count, 0), p579);
Plaintext p379;
encoder.encode(vector<std::int64_t>(slot_count, 0), p379);
Plaintext p710;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p710);
Plaintext p220;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 1, 0},
p220);
Plaintext p601;
encoder.encode(vector<std::int64_t>(slot_count, 0), p601);
Plaintext p401;
encoder.encode(vector<std::int64_t>(slot_count, 0), p401);
Plaintext p732;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p732);
Plaintext p466;
encoder.encode(vector<std::int64_t>{0, 1, 0, 0, 0, 0, 0, 0},
p466);
Plaintext p847;
encoder.encode(vector<std::int64_t>(slot_count, 0), p847);
Plaintext p488;
encoder.encode(vector<std::int64_t>{0, 0, 1, 0, 0, 0, 0, 0},
p488);
Plaintext p869;
encoder.encode(vector<std::int64_t>(slot_count, 0), p869);
Plaintext p510;
encoder.encode(vector<std::int64_t>{0, 0, 0, 1, 0, 0, 0, 0},
p510);
Plaintext p891;
encoder.encode(vector<std::int64_t>(slot_count, 0), p891);
Plaintext p532;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 1, 0, 0, 0},
p532);
Plaintext p913;
encoder.encode(vector<std::int64_t>(slot_count, 0), p913);
Plaintext p554;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 1, 0, 0},
p554);
Plaintext p598;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p598);
Plaintext p88;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p88);
Plaintext p603;
encoder.encode(vector<std::int64_t>(slot_count, 0), p603);
Plaintext p625;
encoder.encode(vector<std::int64_t>(slot_count, 0), p625);
Plaintext p776;
encoder.encode(vector<std::int64_t>{0, 0, 0, 0, 0, 0, 0, 1},
p776);
Plaintext p266;
encoder.encode(vector<std::int64_t>{1, 0, 0, 0, 0, 0, 0, 0},
p266);
Plaintext p781;
encoder.encode(vector<std::int64_t>(slot_count, 0), p781);
Plaintext p803;
encoder.encode(vector<std::int64_t>(slot_count, 0), p803);
Ciphertext c2053;
evaluator.rotate_rows(c57, 4, galois_keys, c2053);
evaluator.add(c57, c2053, c2053);
Ciphertext c2055;
evaluator.rotate_rows(c2053, 2, galois_keys, c2055);
evaluator.add(c2053, c2055, c2053);
evaluator.rotate_rows(c2053, 1, galois_keys, c2055);
evaluator.add(c2053, c2055, c2053);
evaluator.multiply_plain(c2053, p1334, c2053);
evaluator.rotate_rows(c58, 4, galois_keys, c2055);
evaluator.add(c58, c2055, c2055);
Ciphertext c2049;
evaluator.rotate_rows(c2055, 2, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.multiply_plain(c2055, p1356, c2055);
evaluator.rotate_rows(c59, 4, galois_keys, c2049);
evaluator.add(c59, c2049, c2049);
Ciphertext c2043;
evaluator.rotate_rows(c2049, 2, galois_keys, c2043);
evaluator.add(c2049, c2043, c2049);
evaluator.rotate_rows(c2049, 1, galois_keys, c2043);
evaluator.add(c2049, c2043, c2049);
evaluator.multiply_plain(c2049, p1378, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.add(c2053, c2055, c2053);
evaluator.rotate_rows(c60, 4, galois_keys, c2055);
evaluator.add(c60, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.multiply_plain(c2055, p1400, c2055);
evaluator.add(c2053, c2055, c2053);
evaluator.rotate_rows(c61, 4, galois_keys, c2049);
evaluator.add(c61, c2049, c2049);
evaluator.rotate_rows(c2049, 2, galois_keys, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c2049, 1, galois_keys, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.multiply_plain(c2049, p1422, c2049);
evaluator.add(c2053, c2049, c2053);
evaluator.rotate_rows(c62, 4, galois_keys, c2055);
evaluator.add(c62, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.multiply_plain(c2055, p1444, c2055);
evaluator.add(c2053, c2055, c2053);
evaluator.rotate_rows(c63, 4, galois_keys, c2049);
evaluator.add(c63, c2049, c2049);
evaluator.rotate_rows(c2049, 2, galois_keys, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c2049, 1, galois_keys, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.multiply_plain(c2049, p1466, c2049);
evaluator.add(c2053, c2049, c2053);
evaluator.rotate_rows(c64, 4, galois_keys, c2055);
evaluator.add(c64, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2049);
evaluator.add(c2055, c2049, c2055);
evaluator.multiply_plain(c2055, p1488, c2055);
evaluator.add(c2053, c2055, c2053);
evaluator.rotate_rows(c49, 4, galois_keys, c2049);
evaluator.add(c49, c2049, c2049);
evaluator.rotate_rows(c2049, 2, galois_keys, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c2049, 1, galois_keys, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.multiply_plain(c2049, p1156, c2049);
evaluator.rotate_rows(c50, 4, galois_keys, c2055);
evaluator.add(c50, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.multiply_plain(c2055, p1178, c2055);
evaluator.rotate_rows(c51, 4, galois_keys, c2043);
evaluator.add(c51, c2043, c2043);
Ciphertext c1995;
evaluator.rotate_rows(c2043, 2, galois_keys, c1995);
evaluator.add(c2043, c1995, c2043);
evaluator.rotate_rows(c2043, 1, galois_keys, c1995);
evaluator.add(c2043, c1995, c2043);
evaluator.multiply_plain(c2043, p1200, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c52, 4, galois_keys, c2055);
evaluator.add(c52, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.multiply_plain(c2055, p1222, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c53, 4, galois_keys, c2055);
evaluator.add(c53, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.multiply_plain(c2055, p1244, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c54, 4, galois_keys, c2055);
evaluator.add(c54, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.multiply_plain(c2055, p1266, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c55, 4, galois_keys, c2055);
evaluator.add(c55, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.multiply_plain(c2055, p1288, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c56, 4, galois_keys, c2055);
evaluator.add(c56, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.multiply_plain(c2055, p1310, c2055);
evaluator.add(c2049, c2055, c2049);
evaluator.rotate_rows(c33, 4, galois_keys, c2055);
evaluator.add(c33, c2055, c2055);
evaluator.rotate_rows(c2055, 2, galois_keys, c2043);
evaluator.add(c2055, c2043, c2055);
evaluator.rotate_rows(c2055, 1, galois_keys, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.multiply_plain(c2055, p800, c2055);
evaluator.rotate_rows(c34, 4, galois_keys, c1995);
evaluator.add(c34, c1995, c1995);
evaluator.rotate_rows(c1995, 2, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c1995, 1, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.multiply_plain(c1995, p822, c1995);
evaluator.rotate_rows(c35, 4, galois_keys, c2043);
evaluator.add(c35, c2043, c2043);
Ciphertext c1947;
evaluator.rotate_rows(c2043, 2, galois_keys, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c2043, 1, galois_keys, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.multiply_plain(c2043, p844, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.rotate_rows(c36, 4, galois_keys, c1995);
evaluator.add(c36, c1995, c1995);
evaluator.rotate_rows(c1995, 2, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c1995, 1, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.multiply_plain(c1995, p866, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.rotate_rows(c37, 4, galois_keys, c1995);
evaluator.add(c37, c1995, c1995);
evaluator.rotate_rows(c1995, 2, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c1995, 1, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.multiply_plain(c1995, p888, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.rotate_rows(c38, 4, galois_keys, c1995);
evaluator.add(c38, c1995, c1995);
evaluator.rotate_rows(c1995, 2, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c1995, 1, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.multiply_plain(c1995, p910, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.rotate_rows(c39, 4, galois_keys, c1995);
evaluator.add(c39, c1995, c1995);
evaluator.rotate_rows(c1995, 2, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c1995, 1, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.multiply_plain(c1995, p932, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.rotate_rows(c40, 4, galois_keys, c1995);
evaluator.add(c40, c1995, c1995);
evaluator.rotate_rows(c1995, 2, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c1995, 1, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.multiply_plain(c1995, p954, c1995);
evaluator.add(c2055, c1995, c2055);
evaluator.rotate_rows(c25, 4, galois_keys, c1995);
evaluator.add(c25, c1995, c1995);
evaluator.rotate_rows(c1995, 2, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c1995, 1, galois_keys, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.multiply_plain(c1995, p622, c1995);
evaluator.rotate_rows(c26, 4, galois_keys, c2043);
evaluator.add(c26, c2043, c2043);
evaluator.rotate_rows(c2043, 2, galois_keys, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c2043, 1, galois_keys, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.multiply_plain(c2043, p644, c2043);
evaluator.rotate_rows(c27, 4, galois_keys, c1947);
evaluator.add(c27, c1947, c1947);
Ciphertext c1899;
evaluator.rotate_rows(c1947, 2, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.multiply_plain(c1947, p666, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c28, 4, galois_keys, c1899);
evaluator.add(c28, c1899, c1899);
evaluator.rotate_rows(c1899, 2, galois_keys, c1947);
evaluator.add(c1899, c1947, c1899);
evaluator.rotate_rows(c1899, 1, galois_keys, c1947);
evaluator.add(c1899, c1947, c1899);
evaluator.multiply_plain(c1899, p688, c1899);
evaluator.add(c1995, c1899, c1995);
evaluator.rotate_rows(c29, 4, galois_keys, c1947);
evaluator.add(c29, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c2043);
evaluator.add(c1947, c2043, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c2043);
evaluator.add(c1947, c2043, c1947);
evaluator.multiply_plain(c1947, p710, c1947);
evaluator.add(c1995, c1947, c1995);
evaluator.rotate_rows(c30, 4, galois_keys, c2043);
evaluator.add(c30, c2043, c2043);
evaluator.rotate_rows(c2043, 2, galois_keys, c1899);
evaluator.add(c2043, c1899, c2043);
evaluator.rotate_rows(c2043, 1, galois_keys, c1899);
evaluator.add(c2043, c1899, c2043);
evaluator.multiply_plain(c2043, p732, c2043);
evaluator.add(c1995, c2043, c1995);
evaluator.rotate_rows(c31, 4, galois_keys, c1899);
evaluator.add(c31, c1899, c1899);
evaluator.rotate_rows(c1899, 2, galois_keys, c1947);
evaluator.add(c1899, c1947, c1899);
evaluator.rotate_rows(c1899, 1, galois_keys, c1947);
evaluator.add(c1899, c1947, c1899);
evaluator.multiply_plain(c1899, p754, c1899);
evaluator.add(c1995, c1899, c1995);
evaluator.rotate_rows(c32, 4, galois_keys, c1947);
evaluator.add(c32, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c2043);
evaluator.add(c1947, c2043, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c2043);
evaluator.add(c1947, c2043, c1947);
evaluator.multiply_plain(c1947, p776, c1947);
evaluator.add(c1995, c1947, c1995);
evaluator.rotate_rows(c1, 4, galois_keys, c2043);
evaluator.add(c1, c2043, c2043);
evaluator.rotate_rows(c2043, 2, galois_keys, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c2043, 1, galois_keys, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.multiply_plain(c2043, p88, c2043);
evaluator.rotate_rows(c2, 4, galois_keys, c1947);
evaluator.add(c2, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.multiply_plain(c1947, p110, c1947);
evaluator.rotate_rows(c3, 4, galois_keys, c1899);
evaluator.add(c3, c1899, c1899);
Ciphertext c1851;
evaluator.rotate_rows(c1899, 2, galois_keys, c1851);
evaluator.add(c1899, c1851, c1899);
evaluator.rotate_rows(c1899, 1, galois_keys, c1851);
evaluator.add(c1899, c1851, c1899);
evaluator.multiply_plain(c1899, p132, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c4, 4, galois_keys, c1947);
evaluator.add(c4, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.multiply_plain(c1947, p154, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c5, 4, galois_keys, c1947);
evaluator.add(c5, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.multiply_plain(c1947, p176, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c6, 4, galois_keys, c1947);
evaluator.add(c6, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.multiply_plain(c1947, p198, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c7, 4, galois_keys, c1947);
evaluator.add(c7, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.multiply_plain(c1947, p220, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c8, 4, galois_keys, c1947);
evaluator.add(c8, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.multiply_plain(c1947, p242, c1947);
evaluator.add(c2043, c1947, c2043);
evaluator.rotate_rows(c17, 4, galois_keys, c1947);
evaluator.add(c17, c1947, c1947);
evaluator.rotate_rows(c1947, 2, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.rotate_rows(c1947, 1, galois_keys, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.multiply_plain(c1947, p444, c1947);
evaluator.rotate_rows(c18, 4, galois_keys, c1851);
evaluator.add(c18, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1899);
evaluator.add(c1851, c1899, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1899);
evaluator.add(c1851, c1899, c1851);
evaluator.multiply_plain(c1851, p466, c1851);
evaluator.rotate_rows(c19, 4, galois_keys, c1899);
evaluator.add(c19, c1899, c1899);
Ciphertext c1803;
evaluator.rotate_rows(c1899, 2, galois_keys, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c1899, 1, galois_keys, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.multiply_plain(c1899, p488, c1899);
evaluator.add(c1851, c1899, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.rotate_rows(c20, 4, galois_keys, c1899);
evaluator.add(c20, c1899, c1899);
evaluator.rotate_rows(c1899, 2, galois_keys, c1851);
evaluator.add(c1899, c1851, c1899);
evaluator.rotate_rows(c1899, 1, galois_keys, c1851);
evaluator.add(c1899, c1851, c1899);
evaluator.multiply_plain(c1899, p510, c1899);
evaluator.add(c1947, c1899, c1947);
evaluator.rotate_rows(c21, 4, galois_keys, c1851);
evaluator.add(c21, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1899);
evaluator.add(c1851, c1899, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1803);
evaluator.add(c1851, c1803, c1851);
evaluator.multiply_plain(c1851, p532, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.rotate_rows(c22, 4, galois_keys, c1803);
evaluator.add(c22, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p554, c1803);
evaluator.add(c1947, c1803, c1947);
evaluator.rotate_rows(c23, 4, galois_keys, c1803);
evaluator.add(c23, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p576, c1803);
evaluator.add(c1947, c1803, c1947);
evaluator.rotate_rows(c24, 4, galois_keys, c1851);
evaluator.add(c24, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1899);
evaluator.add(c1851, c1899, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1899);
evaluator.add(c1851, c1899, c1851);
evaluator.multiply_plain(c1851, p598, c1851);
evaluator.add(c1947, c1851, c1947);
evaluator.rotate_rows(c41, 4, galois_keys, c1899);
evaluator.add(c41, c1899, c1899);
evaluator.rotate_rows(c1899, 2, galois_keys, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c1899, 1, galois_keys, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.multiply_plain(c1899, p978, c1899);
evaluator.rotate_rows(c42, 4, galois_keys, c1803);
evaluator.add(c42, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p1000, c1803);
evaluator.rotate_rows(c43, 4, galois_keys, c1851);
evaluator.add(c43, c1851, c1851);
Ciphertext c1755;
evaluator.rotate_rows(c1851, 2, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.multiply_plain(c1851, p1022, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c44, 4, galois_keys, c1803);
evaluator.add(c44, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p1044, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c45, 4, galois_keys, c1803);
evaluator.add(c45, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p1066, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c46, 4, galois_keys, c1803);
evaluator.add(c46, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p1088, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c47, 4, galois_keys, c1803);
evaluator.add(c47, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p1110, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c48, 4, galois_keys, c1803);
evaluator.add(c48, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p1132, c1803);
evaluator.add(c1899, c1803, c1899);
evaluator.rotate_rows(c9, 4, galois_keys, c1803);
evaluator.add(c9, c1803, c1803);
evaluator.rotate_rows(c1803, 2, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c1803, 1, galois_keys, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.multiply_plain(c1803, p266, c1803);
evaluator.rotate_rows(c10, 4, galois_keys, c1851);
evaluator.add(c10, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.multiply_plain(c1851, p288, c1851);
evaluator.rotate_rows(c11, 4, galois_keys, c1755);
evaluator.add(c11, c1755, c1755);
Ciphertext c1707;
evaluator.rotate_rows(c1755, 2, galois_keys, c1707);
evaluator.add(c1755, c1707, c1755);
evaluator.rotate_rows(c1755, 1, galois_keys, c1707);
evaluator.add(c1755, c1707, c1755);
evaluator.multiply_plain(c1755, p310, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c12, 4, galois_keys, c1851);
evaluator.add(c12, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1707);
evaluator.add(c1851, c1707, c1851);
evaluator.multiply_plain(c1851, p332, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c13, 4, galois_keys, c1851);
evaluator.add(c13, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.multiply_plain(c1851, p354, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c14, 4, galois_keys, c1851);
evaluator.add(c14, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.multiply_plain(c1851, p376, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c15, 4, galois_keys, c1851);
evaluator.add(c15, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.multiply_plain(c1851, p398, c1851);
evaluator.add(c1803, c1851, c1803);
evaluator.rotate_rows(c16, 4, galois_keys, c1851);
evaluator.add(c16, c1851, c1851);
evaluator.rotate_rows(c1851, 2, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.rotate_rows(c1851, 1, galois_keys, c1755);
evaluator.add(c1851, c1755, c1851);
evaluator.multiply_plain(c1851, p420, c1851);
evaluator.add(c1803, c1851, c1803);
encrypted_outputs.emplace("output[7]", move(c2053));
encrypted_outputs.emplace("output[6]", move(c2049));
encrypted_outputs.emplace("output[4]", move(c2055));
encrypted_outputs.emplace("output[3]", move(c1995));
encrypted_outputs.emplace("output[0]", move(c2043));
encrypted_outputs.emplace("output[2]", move(c1947));
encrypted_outputs.emplace("output[5]", move(c1899));
encrypted_outputs.emplace("output[1]", move(c1803));
}

vector<int> get_rotation_steps_matrix_mul(){
return vector<int>{4, 2, 1};
}
